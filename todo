Priority:

Bug: some undesired strings printed after error messages.


Parser bugs:

Line numbers show the end of exp, not beginning. (spent a lot of time,
do later.)


Core:

Implement function call trace without try catch. Error message stack
and function call stack should be separate.
Maybe as an additional argument to evaluation functions.

Move type checking of all operations from core to base.
Use only directly hardware related operations in core.
First implement naively, then optimize using hash-maps ets.

Abstract function arguments as arrays. And implement splicing.
Merge parameter, argument, and item lists in the parser into one.

Make error statement related to where it is called. Otherwise it
indicates it the error statement wrapper itself is defined.

[__system_feature__ ] for calling functions like write, read,
open, close (for now only these to enable printing to stdout and file,
scanning from them).

printing chars to repl without [print] should print the symbol of
char, not itself. '\n' should print '\n', not newline. Implent this
after implemented print with system calls.

Configure readline.


Base:
Composit types. May implement by warpping type.lmn

cons cells with types. custom printing for cells.

map and amap and smap function in base.  (for cons cells and arrays
and strings) And another iteration function that does not create the
second structure and returns a single value. (a practical version of
while loop)


Stdlib:
Implement list functions in base or stdlib.


Docs:
Docs for base and stdlib.


Test:
Correct core tests.

Test all the error messages. Too long, they will show themselves in
time.

Use valgrind for each error test.


Deside later:
String built in. Creating...

Create parser_info structure rather then filename and line in node.h.
Use it to pass filename, line, and column information.


Long term objectives:
Stream programming.
Find a way for inline documentation. 
Tail call optimization. (maybe with continuation passing style)


Very long term objectives:
Compiler
OOP 

