/*
Semantics test for limon.
Naturaly also syntax test.
*/

// program
// empty_program
// one_exp_exp_list
// mul_exp_exp_list

// scope_exp
def a = 1
{ [assert a == 1] }

{ def in_scope_exp = 2
  [assert in_scope_exp == 2] }
[assert 
 try { in_scope_exp 3 }
 catch (e) { 4 } == 4]

{ def a = 2 }
[assert a == 1]

{ a = 3 }
[assert a == 3]

a = 4
{ [assert a == 4] }

[assert { 5 } == 5]

// precedence (not in AST)
def b = 1
( [assert b == 1] )

( def c = 2
  [assert c == 2] )
[assert c == 2]

( def b = 3 )
[assert b == 3]

( b = 4 )
[assert b == 4]

b = 5
( [assert b == 5] )

[assert (5) == 5]

// def_exp
def c
[assert c == null]

def d = 1
[assert d == 1]

def d = 2
[assert d == 2]

[assert (def a) == null]
[assert (def a = 3) == 3]

// assign_exp
def c
c = 3
[assert c == 3]

def d = 4
[assert d == 4]

[assert (d = 5) == 5]
[assert (def d = 6) == 6]

// mul_assign_exp
(...) = [#]

def e def f def g

(... e) = [# 0]
[assert e == 0]

(... e f) = [# 1 2]
[assert e == 1]
[assert f == 2]

(... e f g) = [# 3 4 5]
[assert e == 3]
[assert f == 4]
[assert g == 5]

def h = ((... e f g) = [# 6 7 8])
[assert [aget h 0] == 6]
[assert [aget h 1] == 7]
[assert [aget h 2] == 8]

// cond_exp
[assert (true ? 1) == 1]
[assert (false? 1) == null]

[assert (true ? 2 : 3) == 2]
[assert (false? 2 : 3) == 3]

[assert (true ? 4
	 true ? 5) == 4]
[assert (false? 4
	 true ? 5) == 5]
[assert (false? 4
	 false? 5) == null]

[assert (true ? 4
	 true ? 5 : 6) == 4]
[assert (false? 4
	 true ? 5 : 6) == 5]
[assert (false? 4
	 false? 5 : 6) == 6]

def c = 0
def count = @() { c += 1 }

(true ? [count]
 true ? [count] : [count])
(false? [count]
 true ? [count] : [count])
(false? [count]
 false? [count] : [count])

[assert c == 3]
 
// print_exp
[assert [print :print_test] == :print_test]
[print '\n']

// try_catch_exp
def c = 0
def count = @() { c += 1 }

[assert 
 try {
    [raise :err]
    [count]
    1
 } catch (e) {
    [assert e == :err]
    [count]
    2
 } == 2]

[assert c == 1]

[assert 
 try {
    //[raise :err]
    [count]
    1
 } catch (e) {
    [assert e == :err]
    [count]
    2
 } == 1]

[assert c == 2]

// convert_exp
[assert [convert 1.1  :integer] == 1]
[assert [convert (-1.1) :integer] == (-2)]
[assert [convert 'a' :integer] == 97]

[assert [convert 97 :char] == 'a']

def f = [convert 2 :float] 
[assert [valuetype f] == :float & f < 2.0001 & f > 1.9999]

// valtype_exp
[assert [valuetype 1]     == :integer]
[assert [valuetype 1.1]   == :float]
[assert [valuetype 'a']   == :char]
[assert [valuetype true]  == :bool]
[assert [valuetype :sym]  == :symbol]
[assert [valuetype null]  == :null]
[assert [valuetype [#]]   == :array]
[assert [valuetype @(){null}] == :procedure]

// gensym_exp
[assert [gensym] != [gensym]]

// var_exp
def a = 4
def b = a
[assert a == b]

// proc_exp
// recxursion
def ones = @(size) {
   def arr = [make_array size]

   def set = @(idx) {
       (idx < size ? (
	[aset arr idx 1]
	[set idx+1]))
   }
   [set 0]

   arr
}

def arr = [ones 100]

def recursive_sum = @(arr) {
   def helper = @(arr idx) {
      (idx == [sizeof arr] ? 0
       : [aget arr idx] + [helper arr idx+1])
   }
   [helper arr 0]
}

def iterative_sum = @(arr) {
   def helper = @(arr idx curr_sum) {
      (idx == [sizeof arr] ? curr_sum
       : [helper arr idx+1 curr_sum+[aget arr idx]])
   }
   [helper arr 0 0]
}

def perform_sum = @(func arr) {
   [func arr]
}

[assert [perform_sum recursive_sum arr] == 100]
[assert [perform_sum iterative_sum arr] == 100]

// closure
def make_count = @(c) {
   @() { c+=1 }
}

def count = [make_count 0]
[assert [count] == 1]
[assert [count] == 2]

// splicing
[@(a b c) {
    [assert a == 1]
    [assert b == 2]
    [assert c == 3]
 } [# 1 2 3]...]

// array_const_exp
[assert [sizeof [#]] == 0]

def arr = [# 1]
[assert [sizeof arr] == 1]
[assert [aget arr 0] == 1]

arr = [# 2 3]
[assert [sizeof arr] == 2]
[assert [aget arr 0] == 2]
[assert [aget arr 1] == 3]

// make_array_exp
[assert [sizeof [make_array 0]] == 0]

def arr = [make_array 1]
[assert [sizeof arr] == 1]
[assert [aget arr 0] == null]

arr = [make_array 2]
[assert [sizeof arr] == 2]
[assert [aget arr 0] == null]
[assert [aget arr 1] == null]

// array_get_exp included above

// array_set_exp
[aset arr 0 4]
[aset arr 1 3]

[assert [aget arr 0] == 4]
[assert [aget arr 1] == 3]

// mathematical operations

// integer
[assert 34 + 21 == 55]
[assert 34 - 21 == 13]
[assert 34 * 20 == 680]
[assert 34 / 7 == 4]
[assert 34 % 7 == 6]

[assert 0-2 == (-2)]

[assert (22 == 22) == true]
[assert (21 == 22) == false]

[assert (22 != 22) == false]
[assert (22 != 21) == true]

[assert (22 > 21) == true]
[assert (21 > 22) == false]
[assert (22 > 22) == false]

[assert (22 >= 21) == true]
[assert (21 >= 22) == false]
[assert (22 >= 22) == true]

[assert (22 < 21) == false]
[assert (21 < 22) == true]
[assert (22 < 22) == false]

[assert (22 <= 21) == false]
[assert (21 <= 22) == true]
[assert (22 <= 22) == true]

// float
def f_eq = @(f1 f2) {
   def diff = f1 - f2
   diff = (diff > 0.0 ? diff : (-diff))
   diff < 0.0001
}

[assert [f_eq 1.1 1.1] == true]
[assert [f_eq 1.1 1.2] == false]

[assert [f_eq (34.0 + 21.0) 55.0]]
[assert [f_eq (34.0 - 21.0) 13.0]]
[assert [f_eq (34.0 * 20.0) 680.0]]
[assert [f_eq (35.0 /  7.0) 5.0]]
[assert [f_eq (34.0 %  7.0) 6.0]]

[assert [f_eq (0.0-2.0) (-2.0)]]

22.0 == 22.0
22.0 != 22.0
[assert (22.0 >  21.0) == true]
[assert (21.0 >  22.0) == false]
[assert (22.0 >  22.0) == false]
[assert (22.0 >= 21.0) == true]
[assert (21.0 >= 22.0) == false]
[assert (22.0 >= 22.0) == true]
[assert (22.0 <  21.0) == false]
[assert (21.0 <  22.0) == true]
[assert (22.0 <  22.0) == false]
[assert (22.0 <= 21.0) == false]
[assert (21.0 <= 22.0) == true]
[assert (22.0 <= 22.0) == true]

// boolean
[assert (true  & false) == false]
[assert (false & true ) == false]
[assert (true  & true ) == true]
[assert (false & false) == false]
[assert (true  | false) == true]
[assert (false | true ) == true]
[assert (true  | true ) == true]
[assert (false | false) == false]

[assert !true == false]
[assert !false == true]

// associativity
[assert 1 + 2 + 3 == 6]
[assert 1 - 2 - 3 == (-4)]
[assert 2 - 5 + 1 == (-2)]

[assert (-(-2)) == 2]

[assert 2 * 3 * 4 == 24]
[assert 25 / 3 / 2 == 4]
[assert 24 / 8 * 4 == 12]

[assert 20 == 20 == true]
[assert 20 != 20 != true]
[assert 20 < 22 == true]
[assert 20 <= 22 == true]

[assert (true & false & true) == false]
[assert (true | false | false) == true]

[assert (!!true) == true]

// precedence
[assert 20-2*3 == 14]
[assert 3 * 4 == 2 * 6]
[assert 2 + 2 == 12 / 3]
[assert 2 + 1 == 1 + 2]
[assert !(2 == 2 & 2 != 2)]
[assert (false & true | true) == true]

[assert (!true & false) == false]

// shortcut assignments
def a = 1

[assert (a += 1) == 2]
[assert a == 2]

[assert (a -= (-2)) == 4]
[assert a == 4]

[assert (a *= 2) == 8]
[assert a == 8]

[assert (a /= 2) == 4]
[assert a == 4]

[assert (a %= 5) == 4]
[assert a == 4]

a = true
[assert (a &= false) == false]
[assert a == false]

[assert (a |= true) == true]
[assert a == true]

// run_exp
{
   [run "run-exp-semantics-test.lmn"]
   [assert [run_test_func] == 4]
}

[assert try {
    run_test_func
    1
 } catch (e) {
    2
 } == 2]

// constants
[assert 11 == 0b1011 & 11 == 0xb & 11 == 0xB]

def f16 = 1.0p16 / 3.0p16 + 0.0p64
def f32 = 1.0p32 / 3.0p32 + 0.0p64
def f64 = 1.0p64 / 3.0p64

def abs = @(a b) {
   def diff = a - b
   diff = (diff > 0.0 ? diff : (-diff))
}

[assert [abs f64 f32] < [abs f64 f16]]

[assert 'a' == 'a']
[assert '\n' == '\n']

def arr_eq_helper = @(a1 a2 idx) {
   (idx == [sizeof a1] ? true
    [aget a1 idx] != [aget a2 idx] ? false
    : [arr_eq_helper a1 a2 idx+1])
}

def arr_eq = @(a1 a2) {
   ([sizeof a1] != [sizeof a2] ? false
    : [arr_eq_helper a1 a2 0])
}

[assert [arr_eq "can" "can"]]

