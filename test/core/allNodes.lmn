/*

Test all AST nodes. Do NOT run with Base library, and don't print the
end value of the program.

This is a naive test. It checks only the most simple cases. The
purpose of this test is to run all evaluate all nodes, not to
thorougly check their functionalities.

Output syntax: for each test output is <node-name>$<evaluated-value>$<check-value>

evaluated-value and check value should be the same if no error.

*/

/* UTILITY */

def map = @(arr f) {
   def size = [__sizeof__ arr]
   def arr2 = [__make_array__ size]
   def i = 0
   (while i < size ? {
       [__array_set__ arr2 i [f [__array_get__ arr i]]]
       i += 1
    })
   arr2
}

def invoke_test = @(test_arr) {
   [map test_arr @(test) {
       def node_name = [__array_get__ test 0]
       def evaluated_value = [__array_get__ test 1]
       def check_value = [__array_get__ test 2]
       [print node_name + " e_val="]
       [print evaluated_value + " c_val="]
       [print check_value + "\n"]
       (evaluated_value != check_value ?
        [error "Error in AST node " + node_name])
    }]
}

/* TEST */

def test_arr =
[# [# "OneExpEL" (1) 1]
   [# "MulExpEL" (1 2) 2]
   [# "ScopeExp" {1} 1]
   [# "DefExp" {def a} null]
   [# "AssignExp" {def a
                   a = 1} 1]
   [# "DefAssignExp-sugar" {def a = 1} 1]
   [# "CondExp-1" (true ? 1) 1]
   [# "CondExp-2" (false ? 1) null]
   [# "CondElseExp-1" (true ? 1 : 2) 1]
   [# "CondElseExp-2" (false ? 1 : 2) 2]
   // [# "OneCondCL" 1 1] ;; already tested above
   [# "MulCondCL-1" (true ? 1
                     true ? 2 : 3) 1]
   [# "MulCondCL-2" (false ? 1
                     true ? 2 : 3) 2]
   [# "MulCondCL-3" (false ? 1
                     false ? 2 : 3) 3]
   [# "WhileExp" { def i = 3
                   (while i>0 ? i-=1) } 0]
   // [# "PrintExp" 1 1] // Will be removed
   [# "ValtypeExp" [__valuetype__ 1] :integer]
   [# "GensymExp"  ([__gensym__] 1) 1] // There is no way to check its value
   [# "SameExp" [__same__ 1 1] false]
   // [# "ErrorExp" 1 1] // Better not to test this
   // [# "ScanExp" 1 1] // Will be removed
   [# "VarExp" { def a = 1
                 a } 1]
   // [# "ParamList" 1 1] // Tested below
   [# "EmptyPL" (@(){1} 1) 1] // No way to check value, procedures are unique
   [# "OneVarPL" (@(a){1} 1) 1]
   [# "MulVarPL" (@(a b){1} 1) 1]
   // [# "ProcExp" 1 1] // Tested above
   [# "ArgList" 1 1] // Tested belove
   [# "EmptyAL" [@(){1}] 1]
   [# "OneArgAL" [@(a){a} 1] 1]
   [# "MulArgAL" [@(a b){a+b} 1 2] 3]
   // [# "CallExp" 1 1] // Tested above
   [# "ArrayConst" [# 1 2] [# 1 2]]
   // [# "ItemList" 1 1] // Tested below
   [# "EmptyIL" [__sizeof__ [#]] 0]
   [# "OneExpIL" [# 1] [# 1]]
   // [# "MulExpIL" 1 1] // Tested above
   [# "ArrayExp" [__make_array__ 2] [__make_array__ 2]]
   [# "ArrayGetExp" [__array_get__ [# 1 2] 0] 1]
   [# "StrGetExp" [__string_get__ "can" 0] 'c']
   [# "ArraySetExp" [__array_set__ [# 1 2] 0 3] [# 3 2]]
   [# "StrSetExp" [__string_set__ "can" 0 'r'] "ran"]
   [# "SizeOfExp" [__sizeof__ [# 1 2]] 2]
   [# "SizeOfExp" [__sizeof__ "can"] 3]
   // [# "BinOpExp" 1 1] // Tested below
   [# "AddExp" 1+2 3]
   [# "SubExp" 1-2 (-1)]
   [# "MulExp" 2*3 6]
   [# "DivExp" 5/2 2]
   [# "RemExp" 5%2 1]
   [# "EquExp" 1==1 true]
   [# "EquExp" 1==2 false]
   [# "NEqExp" 1!=1 false]
   [# "NEqExp" 1!=2 true]
   [# "LoTExp" 1<2 true]
   [# "GrTExp" 1>2 false]
   [# "LEqExp" 1<=2 true]
   [# "GEqExp" 1>=2 false]
   [# "AndExp" true & false false]
   [# "OrExp" true | false true]
   // [# "UnaOpExp" 1 1] // Tested below
   [# "MinExp" (-1) (-1)]
   [# "NotExp" !true false]
   [# "ToStrExp" [__2str__ 1] "1"]
   [# "ToCharExp" [__2char__ 97] 'a']
   [# "ToIntExp" [__2int__ 'a'] 97]
   [# "ToFloatExp" [__valuetype__ [__2float__ 1]] :float]
   [# "RunExp" [run "secondFileForRun.lmn"] 1]
   [# "IntExp" 1 1]
   [# "BoolExp" true true]
   [# "StringExp" "can" "can"]
   [# "SymbolExp" :can :can]
   [# "CharExp" 1 1]
   [# "FloatExp" [__valuetype__ 1.0] :float]
   [# "NullExp" null null]]
    
[invoke_test test_arr]
0

/*

****** DON'T DELETE THESE COMMENTS ********
The test below are more thorough !!!

[printNode "AProgram"] // Already testing

// Empty program expression is tested in a separate file.

[printNode "OneExpEL"]
{
  [pt (1) "1"]
}

[printNode "MulExpEL"]
{
	[println (1 2) + "\t(2)"]
}


[printNode "ScopeExp"]
{
	[println {1} + "\t(1)"]
	def a = 1
	def b = 3
	{
		def a = 2
		b = 4
		def c = 5
		[println a + "\t(2)"]
		[println b + "\t(4)"]
		[println c + "\t(5)"]
	}
}



[printNode "DefExp"]
{
	[println def a + "\t(#<null>)"]
	[println a + "\t(#<null>)"]
}



[printNode "AssignExp"]
{
	def a = 1
	[println (a = 2) + "\t(2)"]
	[println a + "\t(2)"]
}


[printNode "WhileExp"]
{
	def a = 0
	[println (while a < 0 ? a += 1) + "\t(#<null>)"]
	a = 0
	[println (while a < 3 ? a += 1) + "\t(3)"]
	a = 0
	(while a < 3 ? (
		[print a + " "]
		a += 1
	))
	[println "\t(0 1 2)"]
}


[printNode "PrintExp"]
{
	[print null] [println "\t(#<null>)"]
	[print 1] [println "\t(1)"]
	[print 1.1] [println "\t(1.1)"]
	[print 1.1p128] [println "\t(1.1)"]
	[print true] [println "\t(#<true>)"]
	[print "Can"] [println "\t(Can)"]
	[print 'C'] [println "\t(C)"]
	[print [#1 2]] [println "\t({1 2})"]
	[print @() {1}] [println "\t(#<procedure>)"]
}


//[orintNode "ScanExp"]
// scan test is not included


[printNode "VarExp"]
{
	def a = 1
	[println a + "\t(1)"]
}


[printNode "ProcExp"]
{
	[println @(a b) {a b} + "\t(#<procedure>)"]
}


[printNode "CallExp"]
{
	def op = @(n1val n2val) {
		def n1 = n1val
		def n2 = n2val
		@(msg) {
			(msg == "add" ? n1 + n2 :
			(msg == "sub" ? n1 - n2 : "NoMethod"))
		}
	}

	def opInst = [op 3 2]
	[println [opInst "add"] + "\t(5)"]
	[println [opInst "sub"] + "\t(1)"]
}


[printNode "ArrayConst"]
{
	[println [#1 2 3] + "\t({1 2 3})"]
}


[printNode "ArrayExp"]
{
	[println [#2] + "\t({#<null>, #<null>})"]
}


[printNode "ArrayGetExp"]
{
	def arr = [#1 2 3]
	[println [#arr 1] + "\t(2)"]
	def str = "CAN"
	[println [#str 1] + "\t(A)"]
}


[printNode "ArraySetExp"]
{
	def arr = [#1 2 3]
	[println [#arr 1 5] + "\t({1, 5, 3})"]
	[println [#arr 1] + "\t(5)"]
	def str = "CAN"
	[println [#str 1 'K'] + "\t(CKN)"]
	[println [#str 1] + "\t(K)"]
}


[printNode "SizeOfExp"]
{
	def arr = [#3]
	[println [sizeof arr] + "\t(3)"]
	def str = "Can"
	[println [sizeof str] + "\t(3)"]
}


[printNode "AddExp"]
{
	[print "Can" + "Aknesil"] [println "\t(CanAknesil)"]

	[print "Can" + null] [println "\t(Can#<null>)"]
	[print "Can" + 1] [println "\t(Can1)"]
	[print "Can" + true] [println "\t(Can#<true>)"]
	[print "Can" + 'A'] [println "\t(CanA)"]
	[print "Can" + [#'A' 'B']] [println "\t(Can{A, B})"]
	[print "Can" + @() {1}] [println "\t(Can#<procedure>)"]

	[print null    + "Can"] [println "\t(#<null>Can)"]
	[print 1       + "Can"] [println "\t(1Can)"]
	[print true    + "Can"] [println "\t(#<true>Can)"]
	[print 'A'     + "Can"] [println "\t(ACan)"]
	[print [#'A' 'B']  + "Can"] [println "\t({A, B}Can)"]
	[print @() {1} + "Can"] [println "\t(#<procedure>Can)"]

	[print 1 + 2] [println "\t(3)"]
	[print 1 + 'd'] [println "\t(e)"]
	[print 'd' + 1] [println "\t(e)"]
	[print 'a' + 'b'] [println "\t(ab)"]

	[print 1.1 + 2.3] [println "\t(3.4)"]
	[print 1.1 + 3] [println "\t(4.1)"]
	[print 4   + 2.1] [println "\t(6.1)"]
}


[printNode "SubExp"]
{
	[print 1 - 2] [println "\t(-1)"]
	[print 'k' - 2] [println "\t(i)"]
	[print 'k' - 'i'] [println "\t(2)"]

	[print 1.1 - 2.3] [println "\t(-1.2)"]
	[print 1.1 - 3] [println "\t(-1.9)"]
	[print 4   - 2.1] [println "\t(1.9)"]
}


[printNode "MulExp"]
{
	[print 3 * 5] [println "\t(15)"]

	[print 1.1 * 2.3] [println "\t(2.53)"]
	[print 1.1 * 3] [println "\t(3.3)"]
	[print 4   * 2.1] [println "\t(8.4)"]
}


[printNode "DivExp"]
{
	[print 18 / 5] [println "\t(3)"]

	[print 1.1 / 2.3] [println "\t(0.478...)"]
	[print 1.1 / 3] [println "\t(0.366...)"]
	[print 4   / 2.1] [println "\t(1.904...)"]
}


[printNode "RemExp"]
{
	[print 17 % 5] [println "\t(2)"]
}


[printNode "EquExp"]
{
	[println (null     == null     ) + "\t\t(#<true>)"]
	[println (null     == 1        ) + "\t(#<false>)"]
	[println (1        == 1        ) + "\t\t(#<true>)"]
	[println (1        == 2        ) + "\t(#<false>)"]
	[println (1        == true     ) + "\t(#<false>)"]

	[println (1.1      == 1.1      ) + "\t\t(#<true>)"]
	[println (1.1      == 1.11     ) + "\t(#<false>)" ]
	[println (2.0      == 2        ) + "\t\t(#<true>)"]
	[println (2.0      == 3        ) + "\t(#<false>)" ]
	[println (1.0      == true     ) + "\t(#<false>)" ]

	[println (true     == true     ) + "\t\t(#<true>)"]
	[println (true     == false    ) + "\t(#<false>)"]
	[println (true     == false    ) + "\t(#<false>)"]
	[println ("Can"    == "Can"    ) + "\t\t(#<true>)"]
	[println ("Can"    == "can"    ) + "\t(#<false>)"]
	[println ("Can"    == 'C'      ) + "\t(#<false>)"]
	[println ('a'      == 'a'      ) + "\t\t(#<true>)"]
	[println ('a'      == 'b'      ) + "\t(#<false>)"]
	[println ('a'      == [#1]     ) + "\t(#<false>)"]
	[println ([#1 2]   == [#1 2]   ) + "\t\t(#<true>)"]
	[println ([#1 2]   == [#1 3]   ) + "\t(#<false>)"]
	[println ([#1 2]   == [#1 'a'] ) + "\t(#<false>)"]
	[println ([#1 2]   == @() {1}  ) + "\t(#<false>)"]
	[println (null     == null   ) + "\t\t(#<true>)"]
	[println (1        == null   ) + "\t(#<false>)"]
	[println (1        == 1      ) + "\t\t(#<true>)"]
	[println (2        == 1      ) + "\t(#<false>)"]
	[println (true     == 1      ) + "\t(#<false>)"]

	[println (1.1      == 1.1    ) + "\t\t(#<true>)"]
	[println (1.11     == 1.1    ) + "\t(#<false>)" ]
	[println (2        == 2.0    ) + "\t\t(#<true>)"]
	[println (3        == 2.0    ) + "\t(#<false>)" ]
	[println (true     == 1.0    ) + "\t(#<false>)" ]

	[println (true     == true   ) + "\t\t(#<true>)"]
	[println (false    == true   ) + "\t(#<false>)"]
	[println (false    == true   ) + "\t(#<false>)"]
	[println ("Can"    == "Can"  ) + "\t\t(#<true>)"]
	[println ("can"    == "Can"  ) + "\t(#<false>)"]
	[println ('C'      == "Can"  ) + "\t(#<false>)"]
	[println ('a'      == 'a'    ) + "\t\t(#<true>)"]
	[println ('b'      == 'a'    ) + "\t(#<false>)"]
	[println ([#1]     == 'a'    ) + "\t(#<false>)"]
	[println ([#1 2]   == [#1 2] ) + "\t\t(#<true>)"]
	[println ([#1 3]   == [#1 2] ) + "\t(#<false>)"]
	[println ([#1 'a'] == [#1 2] ) + "\t(#<false>)"]
	[println (@() {1}  == [#1 2] ) + "\t(#<false>)"]

	def f = @() {1}
	def g = @() {1}
	[println (f    == f    ) + "\t\t(#<true>)"]
	[println (f    == g    ) + "\t(#<false>)"]
	[println (f    == null ) + "\t(#<false>)"]
	[println (f    == f ) + "\t\t(#<true>)"]
	[println (g    == f ) + "\t(#<false>)"]
	[println (null == f ) + "\t(#<false>)"]
}


[printNode "NEqExp"]
{
	[println (null     != null     ) + "\t(#<false>)"]
	[println (null     != 1        ) + "\t\t(#<true>)"]
	[println (1        != 1        ) + "\t(#<false>)"]
	[println (1        != 2        ) + "\t\t(#<true>)"]
	[println (1        != true     ) + "\t\t(#<true>)"]

	[println (1.1      != 1.1      ) + "\t(#<false>)" ]
	[println (1.1      != 1.11     ) + "\t\t(#<true>)"]
	[println (2.0      != 2        ) + "\t(#<false>)" ]
	[println (2.0      != 3        ) + "\t\t(#<true>)"]
	[println (1.0      != true     ) + "\t\t(#<true>)"]

	[println (true     != true     ) + "\t(#<false>)"]
	[println (true     != false    ) + "\t\t(#<true>)"]
	[println (true     != false    ) + "\t\t(#<true>)"]
	[println ("Can"    != "Can"    ) + "\t(#<false>)"]
	[println ("Can"    != "can"    ) + "\t\t(#<true>)"]
	[println ("Can"    != 'C'      ) + "\t\t(#<true>)"]
	[println ('a'      != 'a'      ) + "\t(#<false>)"]
	[println ('a'      != 'b'      ) + "\t\t(#<true>)"]
	[println ('a'      != [#1]     ) + "\t\t(#<true>)"]
	[println ([#1 2]   != [#1 2]   ) + "\t(#<false>)"]
	[println ([#1 2]   != [#1 3]   ) + "\t\t(#<true>)"]
	[println ([#1 2]   != [#1 'a'] ) + "\t\t(#<true>)"]
	[println ([#1 2]   != @() {1}  ) + "\t\t(#<true>)"]
	[println (null     != null   ) + "\t(#<false>)"]
	[println (1        != null   ) + "\t\t(#<true>)"]
	[println (1        != 1      ) + "\t(#<false>)"]
	[println (2        != 1      ) + "\t\t(#<true>)"]
	[println (true     != 1      ) + "\t\t(#<true>)"]

	[println (1.1      != 1.1    ) + "\t(#<false>)" ]
	[println (1.11     != 1.1    ) + "\t\t(#<true>)"]
	[println (2        != 2.0    ) + "\t(#<false>)" ]
	[println (3        != 2.0    ) + "\t\t(#<true>)"]
	[println (true     != 1.0    ) + "\t\t(#<true>)"]

	[println (true     != true   ) + "\t(#<false>)"]
	[println (false    != true   ) + "\t\t(#<true>)"]
	[println (false    != true   ) + "\t\t(#<true>)"]
	[println ("Can"    != "Can"  ) + "\t(#<false>)"]
	[println ("can"    != "Can"  ) + "\t\t(#<true>)"]
	[println ('C'      != "Can"  ) + "\t\t(#<true>)"]
	[println ('a'      != 'a'    ) + "\t(#<false>)"]
	[println ('b'      != 'a'    ) + "\t\t(#<true>)"]
	[println ([#1]     != 'a'    ) + "\t\t(#<true>)"]
	[println ([#1 2]   != [#1 2] ) + "\t(#<false>)"]
	[println ([#1 3]   != [#1 2] ) + "\t\t(#<true>)"]
	[println ([#1 'a'] != [#1 2] ) + "\t\t(#<true>)"]
	[println (@() {1}  != [#1 2] ) + "\t\t(#<true>)"]

	def f = @() {1}
	def g = @() {1}
	[println (f    != f    ) + "\t(#<false>)"]
	[println (f    != g    ) + "\t\t(#<true>)"]
	[println (f    != null ) + "\t\t(#<true>)"]
	[println (f    != f ) + "\t(#<false>)"]
	[println (g    != f ) + "\t\t(#<true>)"]
	[println (null != f ) + "\t\t(#<true>)"]
}


[printNode "LoTExp"]
{
	[println (1   <   2) + "\t\t(#<true>)"]
	[println (2   <   1) + "\t(#<false>)" ]
	[println (1   <   1) + "\t(#<false>)" ]
	[println ("a" < "b") + "\t\t(#<true>)"]
	[println ("b" < "a") + "\t(#<false>)" ]
	[println ("a" < "a") + "\t(#<false>)" ]
	[println ('a' < 'b') + "\t\t(#<true>)"]
	[println ('b' < 'a') + "\t(#<false>)" ]
	[println ('a' < 'a') + "\t(#<false>)" ]

	[println (1.1 < 2.1) + "\t\t(#<true>)"]
	[println (2.1 < 1.1) + "\t(#<false>)" ]
	[println (2.1 < 2.1) + "\t(#<false>)" ]
	[println (2.5 < 5  ) + "\t\t(#<true>)"]
	[println (5.3 < 2  ) + "\t(#<false>)" ]
	[println (5.0 < 5  ) + "\t(#<false>)" ]
	[println (2   < 5.3) + "\t\t(#<true>)"]
	[println (5   < 2.5) + "\t(#<false>)" ]
	[println (5   < 5.0) + "\t(#<false>)" ]
}


[printNode "GrTExp"]
{
	[println (1   >   2) + "\t(#<false>)" ]
	[println (2   >   1) + "\t\t(#<true>)"]
	[println (1   >   1) + "\t(#<false>)" ]
	[println ("a" > "b") + "\t(#<false>)" ]
	[println ("b" > "a") + "\t\t(#<true>)"]
	[println ("a" > "a") + "\t(#<false>)" ]
	[println ('a' > 'b') + "\t(#<false>)" ]
	[println ('b' > 'a') + "\t\t(#<true>)"]
	[println ('a' > 'a') + "\t(#<false>)" ]

	[println (1.1 > 2.1) + "\t(#<false>)" ]
	[println (2.1 > 1.1) + "\t\t(#<true>)"]
	[println (2.1 > 2.1) + "\t(#<false>)" ]
	[println (2.5 > 5  ) + "\t(#<false>)" ]
	[println (5.3 > 2  ) + "\t\t(#<true>)"]
	[println (5.0 > 5  ) + "\t(#<false>)" ]
	[println (2   > 5.3) + "\t(#<false>)" ]
	[println (5   > 2.5) + "\t\t(#<true>)"]
	[println (5   > 5.0) + "\t(#<false>)" ]
}


[printNode "LEqExp"]
{
	[println (1   <=   2) + "\t\t(#<true>)"]
	[println (2   <=   1) + "\t(#<false>)" ]
	[println (1   <=   1) + "\t\t(#<true>)"]
	[println ("a" <= "b") + "\t\t(#<true>)"]
	[println ("b" <= "a") + "\t(#<false>)" ]
	[println ("a" <= "a") + "\t\t(#<true>)"]
	[println ('a' <= 'b') + "\t\t(#<true>)"]
	[println ('b' <= 'a') + "\t(#<false>)" ]
	[println ('a' <= 'a') + "\t\t(#<true>)"]

	[println (1.1 <= 2.1) + "\t\t(#<true>)"]
	[println (2.1 <= 1.1) + "\t(#<false>)" ]
	[println (2.1 <= 2.1) + "\t\t(#<true>)"]
	[println (2.5 <= 5  ) + "\t\t(#<true>)"]
	[println (5.3 <= 2  ) + "\t(#<false>)" ]
	[println (5.0 <= 5  ) + "\t\t(#<true>)"]
	[println (2   <= 5.3) + "\t\t(#<true>)"]
	[println (5   <= 2.5) + "\t(#<false>)" ]
	[println (5   <= 5.0) + "\t\t(#<true>)"]
}


[printNode "GEqExp"]
{
	[println (1   >=   2) + "\t(#<false>)" ]
	[println (2   >=   1) + "\t\t(#<true>)"]
	[println (1   >=   1) + "\t\t(#<true>)"]
	[println ("a" >= "b") + "\t(#<false>)" ]
	[println ("b" >= "a") + "\t\t(#<true>)"]
	[println ("a" >= "a") + "\t\t(#<true>)"]
	[println ('a' >= 'b') + "\t(#<false>)" ]
	[println ('b' >= 'a') + "\t\t(#<true>)"]
	[println ('a' >= 'a') + "\t\t(#<true>)"]

	[println (1.1 >= 2.1) + "\t(#<false>)" ]
	[println (2.1 >= 1.1) + "\t\t(#<true>)"]
	[println (2.1 >= 2.1) + "\t\t(#<true>)"]
	[println (2.5 >= 5  ) + "\t(#<false>)" ]
	[println (5.3 >= 2  ) + "\t\t(#<true>)"]
	[println (5.0 >= 5  ) + "\t\t(#<true>)"]
	[println (2   >= 5.3) + "\t(#<false>)" ]
	[println (5   >= 2.5) + "\t\t(#<true>)"]
	[println (5   >= 5.0) + "\t\t(#<true>)"]
}


[printNode "AndExp"]
{
	[println (true & true) + "\t\t(#<true>)"]
	[println (true & false) + "\t(#<false>)"]
	[println (false & true) + "\t(#<false>)"]
	[println (false & false) + "\t(#<false>)"]
}


[printNode "OrExp"]
{
	[println (true | true) + "\t\t(#<true>)"]
	[println (true | false) + "\t\t(#<true>)"]
	[println (false | true) + "\t\t(#<true>)"]
	[println (false | false) + "\t(#<false>)"]
}


[printNode "MinExp"]
{
	def a = 1
	[println (-a) + "\t(-1)"]
	[println (-1.3) + "\t(-1.3)"]
}


[printNode "NotExp"]
{
	def a = true
	[println (!a) + "\t(#<false>)"]
}


[printNode "ToStrExp"]
{
	[println [to_str null   ] + "\t(#<null>)"     ]
	[println [to_str 1      ] + "\t(1)"           ]
	[println [to_str 1.2    ] + "\t(1.2)"         ]
	[println [to_str true   ] + "\t(#<true>)"     ]
	[println [to_str "Can"  ] + "\t(Can)"         ]
	[println [to_str 'C'    ] + "\t(C)"           ]
	[println [to_str [#1 2] ] + "\t({1 2})"       ]
	[println [to_str @() {1}] + "\t(#<procedure>)"]
}


[printNode "ToCharExp"]
{
	[println [to_char 67  ] + "\t(C)" ]
	[println [to_char 'B' ] + "\t(B)" ]
}


[printNode "ToIntExp"]
{
	[println [to_int 'A' ] + "\t(65)" ]
	[println [to_int 3   ] + "\t(3)" ]
	[println [to_int 3.2 ] + "\t(3)" ]
}


[printNode "ToFloatExp"]
{
	[println [to_float 3.2 ] + "\t(3.2)" ]
	[println [to_float 3   ] + "\t(3)" ]
}


[printNode "IntExp"]
{
	[println 0 + "\t(0)"]
	[println 1 + "\t(1)"]
	[println 10000000000000000000000000000000000000000 + "\t(10000000000000000000000000000000000000000)"]
	[println 0b101 + "\t(5)"]
	[println 0x1a + "\t(26)"]
}


[printNode "FloatExp"]
{
	[println 0.0 + "\t(0)"]
	[println (1.0 / 3) + "\t(0.333...)"]
	[println (1.0p128 / 3) + "\t(0.333...) precision=128"]

	[println (0b10.1 / 3) + "\t(0.833...)"]
	[println (0b10.1p128 / 3) + "\t(0.833...) precision=128"]

	[println (0x1.1 / 3) + "\t(0.354...)"]
	[println (0x1.1p128 / 3) + "\t(0.354...) precision=128"]
}


[printNode "BoolExp"]
{
	[println true + "\t\t(#<true>)"]
	[println false + "\t(#<false>)"]
}


[printNode "StringExp"]
{
	[println "Can Aknesil" + "\t(Can Aknesil)"]
	[println "Can\aAknesil" + "\t(CanAknesil) and you should hear an alarm"]
	[println "Can Aknesom\b\bil" + "\t(Can Aknesil)"]
	[println "Can\fAknesil" + "\t(Can<Form Feed>Aknesil"]
	[println "Can\nAknesil" + "\t\t(Can<New Line>Aknesil"]
	[println "Burak\rCan Aknesil" + "\t(Can Aknesil)"]
	[println "Can\tAknesil" + "\t(Can<Tab>Aknesil)"]
	[println "Can\vAknesil" + "\t(Can<Vertical Tab>Aknesil)"]
	[println "\"Can Aknesil\"" + "\t(<Quote>Can Aknesil<Quote>)"]
	[println "\\Can Aknesil\\" + "\t(<Back Slash>Can Aknesil<Back Slash>)"]
	[println "Can Aknesil\?" + "\t(Can Aknesil<Question Mark>)"]
}


[printNode "CharExp"]
{
	[println 'a' + "\t(a)"]
	[println '\a' + "\t() and you will hear an alarm"]
	[println "Can Aknesom" + '\b' + '\b' + "il" + "\t(Can Aknesil)"]
	[println "Can" + '\f' + "Aknesil" + "\t(Can<Form Feed>Aknesil"]
	[println "Can" + '\n' + "Aknesil" + "\t\t(Can<New Line>Aknesil"]
	[println "Burak" + '\r' + "Can Aknesil" + "\t(Can Aknesil)"]
	[println "Can" + '\t' + "Aknesil" + "\t(Can<Tab>Aknesil)"]
	[println "Can" + '\v' + "Aknesil" + "\t(Can<Vertical Tab>Aknesil)"]
	[println '\'' + "Can Aknesil" + '\'' + "\t(<Single Quote>Can Aknesil<Single Quote>)"]
	[println '\\' + "Can Aknesil" + '\\' + "\t(<Back Slash>Can Aknesil<Back Slash>)"]
	[println "Can Aknesil" + '\?' + "\t(Can Aknesil<Question Mark>)"]
}


[printNode "NullExp"]
{
	def a = null
	[println null + "\t(#<null>)"]
}


[printNode "Predicate expList"]
{
	[println (1 2) + "\t(2)"]
}


[printNode "Def and Assign Sugar"]
{
	[println (def a = 1) + "\t(1)"]
	[println a + "\t(1)"]
}


[printNode "Shorthand Assignment Sugar"]
{
	def a = 1
	[println (a += 1) + "\t(2)"]
	[println a + "\t(2)"]

	[println (a -= (-1)) + "\t(3)"]
	[println a + "\t(3)"]

	[println (a *= 2) + "\t(6)"]
	[println a + "\t(6)"]

	[println (a /= 3) + "\t(2)"]
	[println a + "\t(2)"]
	a = 19
	[println (a %= 5) + "\t(4)"]
	[println a + "\t(4)"]
	a = true
	[println (a &= false) + "\t(#<false>)"]
	[println a + "\t(#<false>)"]

	[println (a |= true) + "\t\t(#<true>)"]
	[println a + "\t\t(#<true>)"]
}


[printNode "CondExp"]
{
	def a = true
	def b = false
	[println (a ? 1) + "\t(1)"]
	[println (b ? 1) + "\t(#<null>)"]
	[println (a ? 1
	          a ? 2) + "\t(1)"]
	[println (b ? 1
	          b ? 2) + "\t(#<null>)"]
	[println (b ? 1) + "\t(#<null>)"]
	(a ? [print 1]) [println "\t(1)"]
	(b ? [print 1]) [println "\t()"]
}


[printNode "CondElseExp"]
{
	def a = true
	def b = false
	[println (a ? 1 : 2) + "\t(1)"]
	[println (b ? 1 : 2) + "\t(2)"]
	[println (a ? 1
	          a ? 2 : 3) + "\t(1)"]
	[println (b ? 1
	          b ? 2 : 3) + "\t(3)"]
	(a ? [print 1] : [print 2]) [println "\t(1)"]
	(b ? [print 1] : [print 2]) [println "\t(2)"]
}


[printNode "RunExp"]
{
	[println [run "secondFile.lmn"] + "\t(1)"]
}



0

*/


